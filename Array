package Arrays;

import java.util.Scanner;

public class ArrangeNumbersInArray {
	

	public static void printArray(int [] arr)
	{
		for(int i=0;i<arr.length;i++)
		{
	      System.out.print(arr[i]+" ");		
		}
	}

	public static void arrangeNumberArray(int arr[], int n)
	{
		int i=0;
		int k=1;
		int j=n-1;
		while(i<j)
		{
			arr[i++]=k++;
			arr[j--]=k++;
		}
		if(n%2!=0)
		{
			arr[i]=k;
		}
	}
	public static void main(String[] args) {

   Scanner s=new Scanner(System.in);
   int n=s.nextInt();
   int []arr=new int[n];
   
   arrangeNumberArray(arr,n);
   
   printArray(arr);
   

	}

}

package Arrays;

public class ArrayIntersection {
	
	public static void printArray(int [] arr)
	{
		for(int i=0;i<arr.length;i++)
		{
	      System.out.print(arr[i]+" ");		
		}
	}
	
public static void intersections(int arr1[], int arr2[])
{
	int arr3[]=new int[arr2.length];
	for(int i=0;i<arr2.length;i++)
	{
		arr3[i]=arr2[i];
	}
	for(int i=0;i<arr1.length;i++)
	{
		for(int j=0;j<arr3.length;j++)
		{
			if(arr1[i]==arr3[j])
			{
				System.out.print(arr1[i]+" ");
				arr3[j]=Integer.MIN_VALUE;
				break;
			}
		}
	}
}

	   
    public static void main(String[] args)
    {
    	int arr1[]= {43,54,67,12,32,98,90};
    	int arr2[]= {98,76,54,32,12,34,21};
    	
    	 intersections(arr1,arr2);
    	 
    }

}

package Arrays;

public class ArrayRotateCount {

	
	 
	public static int arrayRotateCount(int arr[])
	{
		for(int i=1;i<arr.length;i++)
		{
			if(arr[i]<arr[i-1])
			{
				return i;
			}
		}
		return 0;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int []arr={6,9,3,4,5,6,7,8};
		int count=arrayRotateCount(arr);
		System.out.print(count);
	}

}

package Arrays;

public class ArraysWithFunction {
	
	public static void PrintArray(int [] arr)
	
	{
		System.out.println(arr);
		int n=arr.length;
		for(int i=0;i<n;i++)
		{
			System.out.println(arr[i]);
		}
	}
	
	public static void incrementArray(int input[])
	{
		System.out.println(input);
//	 input=new int[7];
	 for(int i=0;i<input.length;i++)
	 {
		 input[i]=input[i]+1;
	 }
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
       
		int arr[] = {1,2,3,4,5};
		
		incrementArray(arr);
		PrintArray(arr);
	}

}

package Arrays;

public class BinarySearch {

public static int binarySearch(int arr[], int x)
{
	int start=0;
	int end=arr.length-1;
	while(start<=end)
	{
		int mid=(start+end)/2;
		if(arr[mid]<x)
		{
			start=mid+1;
		}
		else if(arr[mid]>x)
		{
			end=mid-1;
		}
		else
		{
			return mid;
		}
			
	}
	return -1;
}
public static void main(String[] args)
{
	int []arr= {23,56,78,90,109,168,901};
	
	int index=binarySearch( arr, 109);
	
	System.out.println("Index is "+ index);
}

}

package Arrays;

public class BubbleSort {
	
	public static void printArray(int [] arr)
	{
		for(int i=0;i<arr.length;i++)
		{
		   System.out.print(arr[i]+" ");	
		}
	}
	
	public static void bubbleSort(int arr[])
	{
		int n=arr.length;
		for(int round=1;round<n-1;round++)
		{
			for(int i=0;i<n-1-round;i++)
			{
				if(arr[i]>arr[i+1])
				{
					int temp=arr[i];
					arr[i]=arr[i+1];
					arr[i+1]=temp;
				}
			}
		}
	}
	public static void main(String[] args)
	{
		int [] arr= {43,65,76,34,87,32,90};
		
		bubbleSort(arr);
		printArray(arr);
	}

}

package Arrays;

public class FindLargestAndSmallest {

	public static void main(String[] args) {
		
		int []arr= {43,54,21,65,87,32,89,57,49};
		
		int smallest=arr[0];
		int largest=arr[0];
		
		for(int i=0;i<arr.length;i++)
		{
			if(arr[i]>largest)
			{
				largest=arr[i];
			}
			else if(arr[i]<smallest)
			{
				smallest=arr[i];
			}
		}
		
		System.out.println("Largest Number is an Array  "+largest);
		
		System.out.println("Smallest Number is an Array  "+smallest);
		
	}
         //  Name    : Safaid 
	    //  Roll No  : 161

}

package Arrays;

public class InsertionSort {

	public static void printArray(int [] arr)
	{
		for(int i=0;i<arr.length;i++)
		{
			System.out.print(arr[i]+" ");
		}
	}

public static void insertionSort(int arr[])
{
	int n=arr.length;
	for(int i=0;i<n;i++)
	{
		int temp=arr[i];
		int j=i-1;
		while(j>=0 && arr[j]>temp)
		{
			arr[j+1]=arr[j];
			j--;
		}
		arr[j+1]=temp;
	}
}
	public static void main(String[] args) {
		
		int [] arr= {43,32,54,90,76,48,12,46};
		insertionSort(arr);
		printArray(arr);
		

	}

}

package Arrays;

public class JeggedArray {

	public static void main(String[] args) {
		
		//int arr[][]=new int[4][5];
		//System.out.println(arr[i][j]+ " ");
	
		int arr[][]=new int[4][];
		//System.out.println(arr);
		
		
		//for(int i=0;i<arr.length;i++)
		//{
			//System.out.println(arr[i]);
		//}
		
		  //  System.out.println(arr[0][0]);
		
		
	//	for(int i=0;i<arr.length;i++) {
			//arr[i]=new int[5];
	//	}
		for(int i=0;i<arr.length;i++)
		{
			arr[i]=new int[i+2];
			
		}
		
		for(int i=0;i<arr.length;i++)
		{
			for(int j=0;j<arr[i].length;j++)
			{
				System.out.print(arr[i][j]+ " ");
				 
			}
			System.out.println();
		}

	}

}

package Arrays;

import java.util.Scanner;

public class LargestOfColumn {
	
	
	public static int [][] takeInput()
	{
		Scanner s = new Scanner(System.in);
		System.out.println("Enter the Number of Row");
		int row=s.nextInt();
	    System.out.println("Enter the Number of Column");
	    int col=s.nextInt();
	    int arr[][]=new int[row][col];
	    
	    for(int i=0;i<row;i++)
	    {
	    	for(int j=0;j<col;j++)
	    	{
	    		System.out.println("Enter value for "+i+" Rows "+j+" Column");
	    		arr[i][j]=s.nextInt();
	    	}
	    }
	    return arr;

	}
	public static int largestColumn(int arr[][])
	{
		int row=arr.length;
		int col=arr[0].length;
		int largest=Integer.MIN_VALUE;
		
		for(int i=0;i<col;i++)
		{
			int sum=0;
			for(int j=0;j<row;j++)
			{
				sum=sum+arr[j][i];
			}
			if(sum>largest)
			{
				largest=sum;
			}
		}
		return largest;
	}

	public static void main(String[] args) {
		int [][] arr=takeInput();
		int largestColSum=largestColumn(arr);
        System.out.println("Largest Column sum is : "+largestColSum);
	}

}

package Arrays;

import java.util.Scanner;

public class LargestRowORColumn {
	public static int [][] takeInput()
	{
		Scanner s = new Scanner(System.in);
		System.out.println("Enter the Number of Row");
		int row=s.nextInt();
	    System.out.println("Enter the Number of Column");
	    int col=s.nextInt();
	    int arr[][]=new int[row][col];
	    
	    for(int i=0;i<row;i++)
	    {
	    	for(int j=0;j<col;j++)
	    	{
	    		System.out.println("Enter value for "+i+" Rows "+j+" Column");
	    		arr[i][j]=s.nextInt();
	    	}
	    }
	    return arr;
	}
	
	
	public static void findLargest(int mat[][]){
		//Your code goes here
        int rowMax = Integer.MIN_VALUE;
        int colMax = Integer.MIN_VALUE;
        int rowpos = 0, colpos = 0;
        for (int i = 0; i < mat.length; i++) {
            int rowSum = 0;
            for (int j = 0; j < mat[i].length; j++) {
                rowSum += mat[i][j];
            }
            if (rowMax < rowSum) {
                rowMax = rowSum;
                rowpos = i;
            }
        }
        if(mat.length!=0)
        for (int i = 0; i < mat[0].length; i++) {
            int colSum = 0;
            for (int[] ints : mat) {
                colSum += ints[i];
            }
            if (colMax < colSum) {
                colMax = colSum;
                colpos = i;
            }
        }
        if (rowMax >= colMax) {
            System.out.println("row " + rowpos + " " + rowMax);
        } else System.out.println("column " + colpos + " " + colMax);
	}




	public static void main(String[] args) {

     int [][]arr=takeInput();
     findLargest(arr);

	}

}

package Arrays;

public class MergeTwoSort {
	
	public static void printArray(int  [] arr)
	{
	   for(int i=0;i<arr.length;i++)
	   {
		   System.out.print(arr[i]+" ");
	   }
	}
public static int [] mergeTwoSortArrays(int arr1[], int arr2[])
{
    int m=arr1.length;
    int n=arr2.length;
    
    int arr[]=new int[m+n];
    int i=0;
    int j=0;
    int k=0;
    
    while(i<m && j<n)
    {
    	if(arr1[i]<=arr2[j])
    	{
    		arr[k]=arr1[i];
    		i++;
    		k++;   		
    	}
    	else
    	{
    		arr[k]=arr2[j];
    		j++;
    		k++;
    	}
    }
    while(i<m)
    {
    	arr[k]=arr1[i];
    	i++;
    	k++;
    }
    while(j<n)
    {
    	arr[k]=arr2[j];
    	j++;
    	k++;
    }
    
    return arr;
}
	public static void main(String[] args) {
		
		int arr1[]= {1 , 3 ,6 ,11 ,12 ,17 };
		int arr2[]= {2 ,8, 13, 16, 19 };
		
		int arr3[]= mergeTwoSortArrays(arr1,arr2);
		
		printArray(arr3);

	}

}

package Arrays;

import java.util.Scanner;

public class PairSum {
	
	
		
	
	public static int  pairSum(int arr[],  int x)
	{
		int count=0;
		int sum=0;
		for(int i=0;i<arr.length-1;i++)
		{
			for(int j=i+1;j<arr.length;j++)
			{
				sum=arr[i]+arr[j];
				if(sum==x)
				{
					count++;
				}
			}
		}
		return count;
	}

	public static void main(String[] args) {

		Scanner s=new Scanner(System.in);
		int x=s.nextInt();
       int []arr= {43,32,54,65,76,87};
       System.out.println(pairSum(arr, x));
       
	}

}

package Arrays;

import java.util.Scanner;

public class Print2DArray {
	
	public static int[][] takeInput()
	{
		Scanner s=new Scanner(System.in);
		int row=s.nextInt();
		int col=s.nextInt();
		int input[][]=new int[row][col];
		for(int i=0;i<row;i++)
		{
			for(int j=0;j<col;j++)
			{
				input[i][j]=s.nextInt();
			}
		}
		return input;
	}
	
	public static void print2DArray(int input[][])
	{
		int k=input.length;
		for(int i=0;i<input.length;i++)
		{
			for(int l=k-1;l>=0;l--)
			{
				for(int j=0;j<input[i].length;j++)
				{
					System.out.print(input[i][j]+" ");
				}
				System.out.println();
			}
			k--;
		}
	}
	public static void main(String[] args) {
		
		int arr[][]=takeInput();
		print2DArray(arr);

	}

}

package Arrays;

import java.util.Scanner;

public class PrintAllPairs {

	public static void printAllPairs(int arr[])
	{
		int n=arr.length;
		for(int i=0;i<n;i++)
		{
			for(int j=i+1;j<n;j++)
			{
				System.out.println("("+arr[i]+","+arr[j]+")");
			}
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int arr[]= {1,2,3,4,5,6,7};
		printAllPairs(arr);
	}

}

package Arrays;

import java.util.Scanner;

public class PrintWave {
	
	public static int [][] takeInput()
	{
		Scanner s = new Scanner(System.in);
		System.out.println("Enter the Number of Row");
		int row=s.nextInt();
	    System.out.println("Enter the Number of Column");
	    int col=s.nextInt();
	    int arr[][]=new int[row][col];
	    
	    for(int i=0;i<row;i++)
	    {
	    	for(int j=0;j<col;j++)
	    	{
	    		System.out.println("Enter value for "+i+" Rows "+j+" Column");
	    		arr[i][j]=s.nextInt();
	    	}
	    }
	    return arr;
	}

	public static void printWave(int [][] mat)
	{
		if(mat.length==0) return;
		for(int i=0;i<mat[0].length;i++)
		{
			int k=mat.length-1;
			for(int j=0;j<mat.length;j++)
			{
				if(i%2==0)
				{
					System.out.print(mat[j][i]+" ");
				}else
					System.out.print(mat[k--][i]+" ");
			}
		}
	}
	public static void main(String[] args) {
		
      int arr[][]=takeInput();
      printWave(arr);
	}

}

package Arrays;

public class PushZeroAtEnd {

	public static void printArray(int [] arr)
	{
		for(int i=0;i<arr.length;i++)
		{
	      System.out.print(arr[i]+" ");		
		}
	}
	
	public static void pushZeroAtEnd(int arr[])
	{
		int n=arr.length;
		int count=0;
		
		for(int i=0;i<n;i++)
		  if(arr[i]!=0)
			  arr[count++]=arr[i];
		while(count<n)
		 arr[count++]=0;
	}
   
   
	public static void main(String[] args) {
	
		int [] arr= {43,12,0,65,0,78,0,23};
		
		pushZeroAtEnd(arr);
		
		printArray(arr);

	}

}

package Arrays;

public class RotateArray {
	
	public static void printArray(int [] arr)
	{
		for(int i=0;i<arr.length;i++)
		{
	      System.out.print(arr[i]+" ");		
		}
	}

	public static void rotateArray(int arr[], int d)
	{
		for(int j=0;j<d;j++)
		{
			for(int i=1;i<arr.length;i++)
			{
				int temp=arr[i-1];
				arr[i-1]=arr[i];
				arr[i]=temp;
			}
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int arr[]= {43,12,0,65,0,78,0,23};
		rotateArray(arr,3);
		printArray(arr);
	}

}

package Arrays;

public class SecondLargestElement {
	
	public static int secondLargestElement(int arr[])
	{
		int n=arr.length;
		int largest=Integer.MIN_VALUE;
		int secondLargest=Integer.MIN_VALUE;
		
		for(int i=0;i<n;i++)
		{
			if(arr[i]>largest)
			{
				largest=arr[i];
			}
		}
		for(int j=0;j<n;j++)
		{
			if(arr[j]>secondLargest && arr[j]!=largest)
			{
				secondLargest=arr[j];
			}
		}
		return secondLargest;
	}

	public static void main(String[] args) {

     int [] arr= {23,43,56,76,89,90};
     int secondLargest=secondLargestElement(arr);
     
     System.out.println(secondLargest);
	}

}

package Arrays;

public class SelectionSort {


    public 	static void printArray(int []arr)
    {
    	for(int i=0;i<arr.length;i++)
    	{
    		System.out.print(arr[i]+" ");
    	}
    }
   public static void selectionSort(int arr[])
   {
	   int n=arr.length;
	   for(int i=0;i<n-1;i++)
	   {
		   int min=Integer.MAX_VALUE;
		   int minIndex=-1;
		   
		   for(int j=i;j<n;j++)
		   {
			   if(arr[j]<min)
			   {
				   min=arr[j];
				   minIndex=j;
			   }
		   }
		   int temp=arr[minIndex];
		   arr[minIndex]=arr[i];
		   arr[i]=temp;
	   }
   }
	public static void main(String[] args) {
		
		int [] arr= {3,43,54,65,21,76,98,90};
		
		selectionSort(arr);
		printArray(arr);

	}

}

package Arrays;

public class Sort012 {
	

	public static void printArray(int [] arr)
	{
		for(int i=0;i<arr.length;i++)
		{
	      System.out.print(arr[i]+" ");		
		}
	}


	
	public static void sort012(int arr[])
	{
		int lo=0;
		int n=arr.length;
		int hi=n-1;
		int mid=0;
		int temp=0;
		
		while(mid<=hi)
		{
			switch(arr[mid])
			{
			case 0:
			{
				temp=arr[lo];
				arr[lo]=arr[mid];
				arr[mid]=temp;
				lo++;
				mid++;
				break;
			}
			case 1:
			{
				mid++;
				break;
			}
			case 2:
			{
				temp=arr[hi];
				arr[hi]=arr[mid];
				arr[mid]=temp;
				hi--;
				break;
			}
			}
		}
	}
	 public static void main(String[] args)
	    {
	        int arr[] = { 0, 1, 1, 0, 1, 2, 1, 2, 0, 0, 0, 1 };
	        int arr_size = arr.length;
	        sort012(arr );
	        System.out.println("Array after seggregation ");
	        printArray(arr);
	    }
	
}

package Arrays;

public class SumOfArray {
	
  	
	public static int SumofArray(int arr[])
	{
	  int sum=0;
	  for(int i=0;i<arr.length;i++)
	  {
		  sum=sum+arr[i];
	  }
	  return sum;
	}
	public static void main(String[] args) {
		
		int []arr= {44,65,67,23,23,17,7};
		int result=SumofArray(arr);
		System.out.print("Output = "+result);

	}
	
        //  Name    : Safaid 
	   //  Roll No  : 161
}

package Arrays;

public class SumOfTwoArray {

	
	public static void printArray(int [] arr)
	{
		for(int i=0;i<arr.length;i++)
		{
	      System.out.print(arr[i]+" ");		
		}
	}

    public static void sumOfTwoArrays(int arr1[], int arr2[], int output[]) {
    int i=arr1.length-1,j=arr2.length-1,k=output.length-1,carry=0;
		
		while(i>=0&&j>=0) {
            int result=carry+arr1[i]+arr2[j];
			carry=result/10;
			result=result%10;
			
			output[k]=result;
			i--;j--;k--;
			
		}
		while(i>=0) {
			int result=carry+arr1[i];
			carry=result/10;
			result=result%10;
			output[k]=result;
			k--;
			i--;
		}
		while(j>=0) {
			int result=carry+arr2[j];
			carry=result/10;
			result=result%10;
			output[k]=result;
			k--;
			j--;
		}
		output[k]=carry;
		
    }

	public static void main(String[] args) {
		int  arr1[]= {13,3,6,7,5,5};
		int arr2[]= {2 ,8, 2, 6, 9,1 };
		 int[] output = new int[1 + Math.max(arr1.length, arr2.length)];
		sumOfTwoArrays(arr1,arr2,output);
		
		printArray(output);

	}

}

package Arrays;

import java.util.Scanner;

public class TotalSumBoundariesAndDiagonals {
	
	public static int [][] takeInput()
	{
		Scanner s = new Scanner(System.in);
		System.out.println("Enter the Number of Row");
		int row=s.nextInt();
	    System.out.println("Enter the Number of Column");
	    int col=s.nextInt();
	    int arr[][]=new int[row][col];
	    
	    for(int i=0;i<row;i++)
	    {
	    	for(int j=0;j<col;j++)
	    	{
	    		System.out.println("Enter value for "+i+" Rows "+j+" Column");
	    		arr[i][j]=s.nextInt();
	    	}
	    }
	    return arr;
	}
	
public static void totalSum(int arr[][])
{
	int sum=0;
	for(int i=0;i<arr.length;i++)
	{
		for(int j=0;j<arr.length;j++)
		{
			if(i==0 || i==arr.length-1 || j==0 || j==arr.length-1 ||  i==j || i==arr.length-j-1 )
			{
				sum+=arr[i][j];
			}
		}
	}
	System.out.print(sum);
}

	public static void main(String[] args) {
		int arr[][]=takeInput();
		totalSum(arr);

	}

}

package RecursionProblem;

import java.util.Scanner;

public class AddStars {
	
	public static String addStars(String str)
	{
		if(str.length()<=1)
		{
			return str;
		}
		if(str.charAt(0)==str.charAt(1))
			return str.charAt(0)+"*"+addStars(str.substring(1));
		return str.charAt(0)+addStars(str.substring(1));
	}
	public static void main(String[] args) {
		
		Scanner s=new Scanner(System.in);
		String str=s.nextLine();
		System.out.print(addStars(str));
	}

}

package RecursionProblem;

public class BinarySearch {
	public  static int binarySearch(int a[],int si, int ei,int x)
	{
		if(si>ei)
		{
			return -1;
		}
		int midIndex=si+(ei-si)/2;
		
		if(a[midIndex]==x)
		{
			return midIndex;
		}
		else if(a[midIndex]<x)
		{
			return binarySearch(a,midIndex+1,ei,x);
		}
		else
		{
			return binarySearch(a,si,midIndex-1,x);
		}
	}
	
	public static void main(String[] args) {
		int a[]= {1,2,3,4,5,6,7,8,9};
		System.out.print(binarySearch(a,0,a.length-1,9));

	}

}

package RecursionProblem;

import java.util.Scanner;

public class CheckAB {
	public static boolean checkAB(String input)
	{
		 if (input.length()==0) 
		        return true;
		    if (input.charAt(0) != 'a')
		        return false;
		    if (input.length() >= 3 && "abb".equals(input.substring(0,3)))
		        return checkAB(input.substring(3));
		    else
		        return checkAB(input.substring(1));
		        
	}

	public static void main(String[] args) {
	
		Scanner s =new Scanner(System.in);
		String str=s.nextLine();
		System.out.print(checkAB(str));

	}

}

package RecursionProblem;

import java.util.Scanner;

class ConvertStringToInt {

	public static int convertStringToInt(String str)
	{
		if(str.length()==1)
			return str.charAt(0)-'0';
		
		double y=convertStringToInt(str.substring(1));
		
		double x=str.charAt(0)-'0';
		x=x*Math.pow(10, str.length()-1)+y;
		
		return (int)(x);
	}
	public static void main(String[] args) {

     Scanner s= new Scanner(System.in);
     
     String str=s.nextLine();
     
     System.out.print(convertStringToInt(str));
	}

}

package RecursionProblem;

import java.util.Scanner;

public class CountZeros {

	public static int countZeros(int n)
	{
		if(n==0)
		{
			return 0;
		}
		if(n<10) //this is actual base case
		{
			return 0;
		}
		else if(n%10==0)
		{
			return 1+countZeros(n/10);
		}
		return countZeros(n/10);
	}
	
	public static void main(String[] args) {

      Scanner s = new Scanner(System.in);
    		  
      int n=s.nextInt();
      System.out.print(countZeros(n));

	}

}

package RecursionProblem;

import java.util.Scanner;

public class FindGeomatricSum {
	
	public static double findGeomatricSum(int n)
	{
		if(n==0)
		{
			return 1;
		}
		double sum=(1/(Math.pow(2, n)));
		return findGeomatricSum(n-1)+sum;
	}
	public static void main(String[] args) {

     Scanner s=new Scanner(System.in);
     int n=s.nextInt();
     System.out.print(findGeomatricSum(n));

	}

}

package RecursionProblem;

import java.util.Scanner;

public class IsStringPalindrome {
	
	public static boolean IspalRec(String str,int s,int e)
	{
		
		 // If there is only one character
		if(s==e)
		{
			return true;
		}
		
		 // If first and last
        // characters do not match
		if((str.charAt(s)) != (str.charAt(e)))
			return false;
		
		// If there are more than
        // two characters, check if
        // middle substring is also
        // palindrome or not.
		if(s<e+1)
		 
		return IspalRec(str,s+1,e-1);
		return true;
		
	}
	
	public static boolean isStringPalindrome(String str)
	{
		int n=str.length();
		if(n==0)
			return true;
		return IspalRec(str,0,n-1);
	}

	public static void main(String[] args) {
		
		Scanner s=new Scanner(System.in);
		String str=s.nextLine();
	    System.out.print(isStringPalindrome(str));
	    

	}

}

package RecursionProblem;

public class MergeSort {

	public static void merge(int s1[], int s2[], int s[])
	{
		int i=0,j=0,k=0;
		while(i<s1.length && j<s2.length)
		{
			if(s1[i]<s2[j])
			{
			   s[k]=s1[i];
			   i++;
			   k++;
			}
			else
			{
				s[k]=s2[j];
				k++;
				j++;
				
			}
		}
		if(i<s1.length)
		{
			while(i<s1.length)
			{
				s[k]=s1[i];
				i++;
				k++;
			}
		}
		if(j<s2.length)
		{
			while(j<s2.length)
			{
				s[k]=s2[j];
				k++;
				j++;
			}
		}
	}
	public static void mergeSort(int a[])
	{
		if(a.length<=1)
		{
			return ;
		}
		int b[]=new int[a.length/2];
		int c[]=new int[a.length-b.length];
		
		for(int i=0;i<a.length/2;i++)
		{
			b[i]=a[i];
		}
		for(int i=a.length/2;i<a.length;i++)
		{
			c[i-a.length/2]=a[i];
		}
		
		mergeSort(b);
		mergeSort(c);
		merge(b,c,a);
	}
    public static void main(String[] args){
       
        int a[]={10,4,5,9,8,6,12,11,7};
        mergeSort(a);
        for(int i=0;i<a.length;i++){
            System.out.print(a[i]+" ");
        }
    }

}

package RecursionProblem;

public class QuickSort {
	
	
	 public static int partition(int a[],int si,int ei){
	        int pivotElement=a[si];
	        int smallerNumCount=0;
	        for(int i=si+1;i<=ei;i++){
	            if(a[i]<pivotElement){
	                smallerNumCount++;
	            }
	        }
	        int temp=a[si+smallerNumCount];
	        a[si+smallerNumCount]=pivotElement;
	        a[si]=temp;
	        int i=si;
	        int j=ei;
	        while(i<j){
	            if(a[i]<pivotElement){
	                i++;
	            }else if(a[j]>=pivotElement){
	                j--;
	            }else{
	                 temp=a[i];
	                a[i]=a[j];
	                a[j]=temp;
	                i++;
	                j--;
	            }
	        }
	        return si+smallerNumCount;
	    }
	    public static void quickSort(int a[],int si,int ei){
	        if(si>=ei){
	            return;
	        }
	        int pivotIndex=partition(a,si,ei);
	        quickSort(a,si,pivotIndex-1);
	        quickSort(a,pivotIndex+1,ei);
	    }

	public static void main(String[] args) {
		
		  int a[]={10,4,5,9,8,6,12,11,7};
	        quickSort(a,0,a.length-1);
	        for(int i=0;i<a.length;i++){
	            System.out.print(a[i]+" ");
	        }

	}

}

package RecursionProblem;

public class ReplaceCharacter {
	
	
	public static String replaceChar(String str, char a, char b)
	{
		if(str.length()==0)
		{
			return str;
		}
		String smallOutput=replaceChar(str.substring(1),a,b);
		if(str.charAt(0)==a)
		{
			return b+smallOutput;
		}
		else
		{
			return str.charAt(0)+smallOutput;
		}
	}
        
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(replaceChar("abcxdxex",'x','y'));
	}

}

package RecursionProblem;

public class ReplacePi {
	
	public static String replacePi(String s)
	{
		if(s.length()<=1)
		{
			return s;
		}
		if(s.charAt(0)=='p' && s.charAt(1)=='i')
		{
			//call recursion on String length	n-2
			
			String smallOutput=replacePi(s.substring(2));
	        return "3.14"+smallOutput;
		}else
		{
		   // call recursion on String length n-1
			
			String smallOutput=replacePi(s.substring(1));
			return s.charAt(0)+smallOutput;
		}
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		System.out.print(replacePi("apiapiapiapipii"));
		

	}

}

package RecursionProblem;

import java.util.Scanner;

public class SumOfDigits {

	public static int sumOfDigits(int n)
	{
		if(n==0)
			return 0;
		return(n%10+sumOfDigits(n/10));
	}
}
