package LinkedListDataStructure;

import java.util.Scanner;

public class AppendLastNToFirst {
	
	
	
	public static Node<Integer> takeInput()
	{
		Scanner s=new Scanner(System.in);
		int data=s.nextInt();
		
		Node<Integer> head=null,tail=null;
		while(data!=-1)
		{
			Node<Integer> currentNode = new Node<Integer>(data);
			if(head==null)
			{
				// Make this node as head node
				head=currentNode;
				tail=currentNode;
			}else
			{
				
			  tail.next=currentNode;
			  tail=currentNode;
			}
			data=s.nextInt();
			  
		}
		return head;
	}
	
	public static int LengthIterative(Node<Integer>head){
		int count=0;
		while(head!=null)
		{
			count++;
			head=head.next;
		}
		return count;
	}

	public static Node<Integer> appendLastNToFirst(Node<Integer> head, int n) {
		//Your code goes here
		if (head == null || n == 0)
        { return head; }
        Node<Integer>temp1=head;
		Node<Integer>temp2=head;
		int length=LengthIterative(head);
		int i=0;
		while(i<length-n-1)
		{
			temp1=temp1.next;
			i++;
		}
		head=temp1.next;
		temp1.next=null;
		Node<Integer>tempHead=head;
		while(tempHead.next!=null)
		{
			tempHead=tempHead.next;
		}
		tempHead.next=temp2;
		return head;
		
	}
		
	public static void ReversePrint(Node<Integer> head)
	  {    
	      Node<Integer> curNode=head;

	      if(curNode!=null){
	          if(curNode.next!=null){
	              ReversePrint(curNode.next);
	          }
	          System.out.print(curNode.data+" ");
	      }
	  }
	
	public static void print(Node<Integer> head)
	{
		Node<Integer>temp=head;
		while(temp!=null)
		{
			System.out.print(temp.data+" ");
			temp=temp.next;
		}
	}

	public static void main(String[] args) {
		Scanner s=new Scanner(System.in);
		Node<Integer> head=takeInput();
		int n=s.nextInt();
        head=appendLastNToFirst(head,n);
		print(head);
//		int result=LengthIterative(head);
//		System.out.println(result);
//	
//		ReversePrint(head);

	}

}

package LinkedListDataStructure;

import java.util.Scanner;

public class DeleteEveryN_Nodes {
	
	
	public static Node<Integer> takeInput()
	{
		Scanner s=new Scanner(System.in);
		int data=s.nextInt();
		
		Node<Integer> head=null,tail=null;
		while(data!=-1)
		{
			Node<Integer> currentNode = new Node<Integer>(data);
			if(head==null)
			{
				// Make this node as head node
				head=currentNode;
				tail=currentNode;
			}else
			{
				
			  tail.next=currentNode;
			  tail=currentNode;
			}
			data=s.nextInt();
			  
		}
		return head;
	}
	
	public static Node<Integer> skipMdeleteN(Node<Integer> head, int M, int N) {
		//Your code goes here
        
        if(head==null)
            return head;
        if(M==0)
            return null;
        if(N==0)
            return head;
       Node<Integer> curr=head,t;
        int count;
        while(curr!=null)
        {
        for(count=1;count<M && curr!=null;count++)
        {
            curr=curr.next;
        }
        if(curr==null)
            return head;
        t=curr.next;
        for(count=1;count<=N && t!=null;count++)
        {
            t=t.next;
        }
        curr.next=t;
        curr=t;
        }
        return head;

	}
     public static void print(Node<Integer> head) 
     
     {
    	 while(head!=null)
    	 {
    		System.out.print(head.data+" ");
    		head=head.next;
    	 }
     }
	public static void main(String[] args) {
		
		Scanner sc=new Scanner(System.in);
		Node<Integer> head=takeInput();
		int m=sc.nextInt();
		int n=sc.nextInt();
		head=skipMdeleteN(head,m,n);
		print(head);
		

	}

}

package LinkedListDataStructure;

import java.util.Scanner;

public class EliminateDuplicatesFromLL {
	
	public static Node<Integer> takeInput()
	{
		Scanner s=new Scanner(System.in);
		int data=s.nextInt();
		
		Node<Integer> head=null,tail=null;
		while(data!=-1)
		{
			Node<Integer> currentNode = new Node<Integer>(data);
			if(head==null)
			{
				// Make this node as head node
				head=currentNode;
				tail=currentNode;
			}else
			{
				
			  tail.next=currentNode;
			  tail=currentNode;
			}
			data=s.nextInt();
			  
		}
		return head;
	}
	
	
public static Node<Integer> removeDuplicates(Node<Integer> head) {
		
		if(head == null || head.next == null)
            return head;
 
        Node<Integer> prev = head;    
        Node<Integer> temp = head.next;
 
        while(temp != null){
            if(temp.data.compareTo(prev.data) == 0)  //compare non primitive dataType like this not using == (VERY IMPORTANT THING TO NOTE)
            {
                prev.next = temp.next;
                temp = temp.next;
            }
            else{
                prev = temp;
                temp = temp.next; 
            }
        }
       return head;
        
	}
	
	
	public static void print(Node<Integer> head)
	{
		Node<Integer>temp=head;
		while(temp!=null)
		{
			System.out.print(temp.data+" ");
			temp=temp.next;
		}
	}
	

	public static void main(String[] args) {
		Node<Integer> head=takeInput();
		
		Node<Integer>head1=removeDuplicates(head);
		print(head1);

	}

}

package LinkedListDataStructure;

import java.util.Scanner;

public class InsertNodeWithRecursion {

	public static Node<Integer> takeInput()
	{
		Scanner s=new Scanner(System.in);
		int data=s.nextInt();
	 
		Node<Integer> head=null,tail=null;
		
		while(data!=-1)
		{
			Node<Integer> currentNode=new Node<Integer>(data);
			if(head==null)
			{
				head=currentNode;
				tail=currentNode;
			}
			else
			{
				tail.next=currentNode;
				tail=currentNode;
			}
			data=s.nextInt();
		}
		return head;
	}
	
	public static Node<Integer> InsertR(Node<Integer> head, int ele, int pos)
	{
		if(head==null && pos>0)
		{
			return head;
		}
		if(pos==0)
		{
			Node<Integer> newNode=new Node<Integer>(ele);
			newNode.next=head;
			return newNode;
		}
		else
		{
			head.next=InsertR(head.next,ele,pos-1);
			return head;
		}
	}
	public static Node<Integer> DeleteNodeRec(Node<Integer> head , int pos)
	{
		if(head==null && pos>=0)
		{
			return head;
		}
		if(pos==0)
		{
			return head.next;
		}
		else
		{
			head.next=DeleteNodeRec(head.next,pos-1);
			return head;
		}
	}
	
	public static Node<Integer> ReverseLinkedList(Node<Integer> head)
	{
		if(head==null || head.next==null)
		{
			return head;
		}
		Node<Integer> result=ReverseLinkedList(head.next);
		head.next.next=head;
		
		head.next=null;
		return result;
	}
	
	
	public static int findNode(Node<Integer> head, int n) {
		// Write your code here.
        Node<Integer> temp=head;
        
        if(temp==null)
        {
            return -1;
        }
        else
        {
            if(temp.data!=n)
            {
                int k=findNode(temp.next,n);
                if(k!=-1)
                    return k+1;
                return -1;
            }
            else
                return 0;
        }
	}
	
	public static Node<Integer> MidPoint(Node<Integer> head)
	{
		Node<Integer> slow=head,fast=head;
		if(head==null)
		{
			return head;
		}
		while(fast.next!=null && fast.next.next!=null)
		{
			slow=slow.next;
			fast=fast.next.next;
		}
		return slow;
	}
	public static void printR(Node<Integer>head)
	{
		if(head==null)
			return;
		System.out.print(head.data+" ");
		printR(head.next);
	}
	public static void main(String[] args) {
		
     Node<Integer> head=takeInput();
//      head=InsertR(head,40,2);
//      head=DeleteNodeRec(head,3);
//      head=ReverseLinkedList(head);
      head=MidPoint(head);
      System.out.print(head.data);
      // int x= findNode(head,n);
//      printR(head);
	}

}

package LinkedListDataStructure;

import java.util.Scanner;

public class KReverse {

	
	public static Node<Integer> takeInput()
	{
		Scanner s=new Scanner(System.in);
		int data=s.nextInt();
	 
		Node<Integer> head=null,tail=null;
		
		while(data!=-1)
		{
			Node<Integer> currentNode=new Node<Integer>(data);
			if(head==null)
			{
				head=currentNode;
				tail=currentNode;
			}
			else
			{
				tail.next=currentNode;
				tail=currentNode;
			}
			data=s.nextInt();
		}
		return head;
	}
	
	
	public static Node<Integer> kReverse(Node<Integer>  head, int k) {
		if(head == null || k==0) 
            return head;

		Node<Integer>  prev = null;
		Node<Integer>  temp = head;
        int c = 0;

        while(temp != null && c < k ) {
        	Node<Integer>  next = temp.next;
            temp.next = prev;
            prev = temp;
            temp = next;
            c++;
        }
        if(temp != null) {
            head.next = kReverse(temp,k);
        }
        return prev;
	}
	
	
	public static void printR(Node<Integer>head)
	{
		if(head==null)
			return;
		System.out.print(head.data+" ");
		printR(head.next);
	}
	public static void main(String[] args) {
		Node<Integer> head=takeInput();
		
		Scanner s=new Scanner(System.in);
		int k=s.nextInt();
		
		head=kReverse(head,k);
		printR(head);
	}

}

package LinkedListDataStructure;

import java.util.Scanner;

public class LinkedListUse {

//	public static Node<Integer> CreateLinkedList()
//	{
//		Node<Integer> n1=new Node<>(10);
//		Node<Integer> n2=new Node<>(20);
//		Node<Integer> n3=new Node<>(30);
//		Node<Integer> n4=new Node<>(40);
//		
//		n1.next=n2;
//		n2.next=n3;
//		n3.next=n4;
//		n4=null;
//		return(n1);
//	}
//	 

	public static Node<Integer> takeInput()
	{
		Scanner s=new Scanner(System.in);
		int data=s.nextInt();
		
		Node<Integer> head=null,tail=null;
		while(data!=-1)
		{
			Node<Integer> currentNode = new Node<Integer>(data);
			if(head==null)
			{
				// Make this node as head node
				head=currentNode;
				tail=currentNode;
			}else
			{
				
			  tail.next=currentNode;
			  tail=currentNode;
			}
			data=s.nextInt();
			  
		}
		return head;
	}
	
	public static Node<Integer> Insert(Node<Integer> head, int ele, int pos)
	{
		Node<Integer> NodeToBeInsert=new Node<Integer>(ele);
		if(pos==0 )
		{
			NodeToBeInsert.next=head;
			return NodeToBeInsert;
		}
		else
		{
			int count=0;
			Node<Integer> prev=head;
			while(count<pos-1 && prev!=null)
			{
				count++;		
				prev=prev.next;
			}
			if(prev!=null)
			{
				NodeToBeInsert.next=prev.next;
				prev.next=NodeToBeInsert;
			}
			return head;
		}
		
	}
	
	public static Node<Integer> deleteNode(Node<Integer> head, int pos) {
		
        
         if(head==null )
            return head;
        if(pos==0)
            return head.next;
        int count=0;
        Node<Integer> temp=head;
        while(temp!=null && count<pos-1)
        {
            temp=temp.next;
            count++;
        }
        if(temp==null)
            return head;
        if(temp.next!=null)
            temp.next=temp.next.next;
         
        
        return head;
	}
	
	
	public static int findNode(Node<Integer> head, int n) {
		// Write your code here.
        Node<Integer> temp=head;
        
        if(temp==null)
        {
            return -1;
        }
        else
        {
            if(temp.data!=n)
            {
                int k=findNode(temp.next,n);
                if(k!=-1)
                    return k+1;
                return -1;
            }
            else
                return 0;
        }
	}

	public static Node<Integer> merge(Node<Integer> head1, Node<Integer> head2)
	{
		if(head1==null)
		{
			return head2;
		}
		if(head2==null)
		{
			return head1;
		}
		
		Node<Integer> t1=head1,t2=head2;
		Node<Integer> head=null, tail=null;
		
		if(t1.data<=t2.data)
		{
			head=t1;
			tail=t1;
			t1=t1.next;
		}
		else
		{
			head=t2;
			tail=t2;
			t2=t2.next;
		}
		
		while(t1!=null && t2!=null)
		{
			if(t1.data<=t2.data)
			{
				tail.next=t1;
				tail=t1;
				t1=t1.next;	
			}
			else
			{
				tail.next=t2;
				tail=t2;
				t2=t2.next;
			}
		}
		
		// One list is Over
		if(t1!=null)
		{
			// First list is remaining
			tail.next=t1;
		}
		else
		{
			tail.next=t2;
		}
		return head;
	}  
	public static void printIthNode(Node<Integer> head, int i){
		//Your code goes here
    
	      Node<Integer>current=head;
	       int count=0;
	       while(current!=null)
	       {
	    	   if(count==i)
	    	   {
	    		 System.out.print(current.data);
	    	   }
	    	   count++;
	    	   current=current.next;
	       }
    }  
	
	public static void print(Node<Integer> head)
	{
		Node<Integer>temp=head;
		while(temp!=null)
		{
			System.out.print(temp.data+" ");
			temp=temp.next;
		}
	}
	
	public static void increment(Node<Integer> head)
	{
	    Node<Integer> temp=head;
	    while(temp!=null)
	    {
	    	temp.data++;
	    	System.out.print(temp.data+" ");
	    	temp=temp.next;
	    }
	    
	}
	
	
	public static int length(Node<Integer> head)
	{
		Node<Integer> temp=head;
		int count=0;
		while(temp!=null)
		{
			count++;
			temp=temp.next;
		}
		return count;
	}	
	
	
	public static void main(String[] args) {
		
//		Node<Integer> head = takeInput();
		
		//head=deleteNode(head,4);
		
		//printIthNode(head,3);
		
//		int result=findNode(head,34);
//		System.out.println(result);
		
	  // head=Insert(head,100,4);
		
		//print(head);
		//increment(head);
		
		Node<Integer> head1=takeInput();
		Node<Integer> head2=takeInput();
		
		Node<Integer> result=merge(head1,head2);
		print(result);
		
		
		

	}

}

package LinkedListDataStructure;

import java.util.HashMap;

public class LRU_Cache {

	
//	doubly linked list having a key and  value;
	class Node{
		Node prev,next;
		int key,value;
		
		Node(int key, int value)
		{
			this.key=key;
			this.value=value;
		}
	}
	
	// map for mapping key with their corresponding nodes
	
	
	
	Node head=new Node(0,0),tail=new Node(0,0);
	HashMap<Integer,Node> map=new HashMap<>();
	int capacity;
	
	public LRU_Cache(int capacity)
	{
		this.capacity=capacity;
		this.head.next=tail;
		this.tail.prev=head;
		
	}
	
	
	public int get(int key)
	{
		if(map.containsKey(key))
		{
			Node node=map.get(key);
		    remove(node);
		    insert(node);
		    return node.value;
		}
		else
		{
			return -1;
		}
			
	}
	
	public void put(int key , int value)
	{
		if(map.containsKey(key))
		{
			remove(map.get(key));
		}
		if(map.size()==capacity)
		{
			remove(tail.prev);
		}
		insert(new Node(key,value));
	}
	
	
	private void remove(Node node)
	{
		map.remove(node.key);
		node.prev.next=node.next;
		node.next.prev=node.prev;
		
	}
	
	private void insert(Node node)
	{
		map.put(node.key, node);
		node.next=head.next;
		node.next.prev=node;
		head.next=node;
		node.prev=node;
		
	}
	

}

package LinkedListDataStructure;

import java.util.Scanner;

public class MergeSort {
	
	public static Node<Integer> takeInput()
	{
		Scanner s=new Scanner(System.in);
		int data=s.nextInt();
	 
		Node<Integer> head=null,tail=null;
		
		while(data!=-1)
		{
			Node<Integer> currentNode=new Node<Integer>(data);
			if(head==null)
			{
				head=currentNode;
				tail=currentNode;
			}
			else
			{
				tail.next=currentNode;
				tail=currentNode;
			}
			data=s.nextInt();
		}
		return head;
	}
	
	
	
	 public static Node<Integer> getMiddle(Node<Integer> head)
	    {
	        if (head == null)
	            return head;

	        Node<Integer> slow = head, fast = head;

	        while (fast.next != null && fast.next.next != null) {
	            slow = slow.next;
	            fast = fast.next.next;
	        }
	        return slow;
	    }
	    
	    
	    
	   public static Node<Integer> sortedMerge(Node<Integer> a, Node<Integer> b)
	    {
		   Node<Integer> result = null;
	        /* Base cases */
	        if (a == null)
	            return b;
	        if (b == null)
	            return a;

	        /* Pick either a or b, and recur */
	        if (a.data <= b.data) {
	            result = a;
	            result.next = sortedMerge(a.next, b);
	        }
	        else {
	            result = b;
	            result.next = sortedMerge(a, b.next);
	        }
	        return result;
	    }

		public static Node<Integer> mergeSort(Node<Integer> head) {
			//Your code goes here
	        
	         // Base case : if head is null
	        if (head == null || head.next == null) {
	            return head;
	        }

	        // get the middle of the list
	        Node<Integer> middle = getMiddle(head);
	        Node<Integer> nextofmiddle = middle.next;

	        // set the next of middle node to null
	        middle.next = null;

	        // Apply mergeSort on left list
	        Node<Integer> left = mergeSort(head);

	        // Apply mergeSort on right list
	        Node<Integer> right = mergeSort(nextofmiddle);

	        // Merge the left and right lists
	        Node<Integer> sortedlist = sortedMerge(left, right);
	        return sortedlist;
		}
		
		public static void printR(Node<Integer>head)
		{
			if(head==null)
				return;
			System.out.print(head.data+" ");
			printR(head.next);
		}

	public static void main(String[] args) {
		
		Node<Integer> head=takeInput();
		
		Node<Integer> result=mergeSort(head);
		printR(result);

	}

}

package LinkedListDataStructure;

public class Node<T> {

   public 	T data;
	public Node<T> next;
    
	public Node(T data)
	{
		this.data=data;
	}
	
}

package LinkedListDataStructure;

import java.util.ArrayList;

public class RemoveConsecutiveDuplicates {
	
	public static ArrayList<Integer> removeConsecutiveDuplicates(int arr[])
	{
		ArrayList<Integer> result=new ArrayList<>();
		result.add(arr[0]);
		for(int i=1;i<arr.length;i++)
		{
			if(arr[i]!=arr[i-1])
			{
				result.add(arr[i]);
			}
		}
		return result;
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int arr[]= {10,10,20,20,30,30,40,40};
		ArrayList<Integer> result=removeConsecutiveDuplicates(arr);
		for(int i=0;i<result.size();i++)
		{
			System.out.println(result.get(i));
		}

	}

}
